package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"go_goals/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Task)
// DB Table: Plural (tasks)
// Resource: Plural (Tasks)
// Path: Plural (/tasks)
// View Template Folder: Plural (/templates/tasks/)

// TasksResource is the resource for the Task model
type TasksResource struct {
	buffalo.Resource
}

func setPageContextForTasks(c buffalo.Context) {
	c.Set("priorityOptions", PRIORITY_OPTIONS)
	c.Set("priorityIdsToNameMapping", PRIORITY_IDS_TO_NAME)
	currentUser := c.Value("current_user").(*models.User)
	goalOptions := make(map[string]string)
	var goalIds []interface{}
	goalIdsToNameMap := make(map[string]string)
	goals := []models.Goal{}
	err := models.DB.Where("user_id = ?", currentUser.ID).Where("active = true").All(&goals)
	if err == nil {
		for _, goal := range goals {
			goalIds = append(goalIds, goal.ID.String())
			goalOptions[goal.Title] = goal.ID.String()
			goalIdsToNameMap[goal.ID.String()] = goal.Title
		}
	} else {
		c.Logger().Errorf("Error getting goals: %v", err)
	}
	c.Set("goalOptions", goalOptions)
	c.Set("goalIdsToNameMap", goalIdsToNameMap)

	milestoneOptions := make(map[string]string)
	milestoneIdsToNameMap := make(map[string]string)
	milestones := []models.Milestone{}
	err = models.DB.Where("goal_id in (?)", goalIds...).All(&milestones)
	if err == nil {
		for _, milestone := range milestones {
			milestoneOptions[milestone.Title] = milestone.ID.String()
			milestoneIdsToNameMap[milestone.ID.String()] = milestone.Title
		}
	} else {
		c.Logger().Errorf("Error getting goals: %v", err)
	}
	c.Set("milestoneOptions", milestoneOptions)
	c.Set("milestoneIdsToNameMap", milestoneIdsToNameMap)
}

// List gets all Tasks. This function is mapped to the path
// GET /tasks
func (v TasksResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	tasks := &models.Tasks{}
	setPageContextForTasks(c)

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Tasks from the DB
	if err := q.All(tasks); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("tasks", tasks)
		return c.Render(http.StatusOK, r.HTML("tasks/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(tasks))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(tasks))
	}).Respond(c)
}

// Show gets the data for one Task. This function is mapped to
// the path GET /tasks/{task_id}
func (v TasksResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Task
	task := &models.Task{}
	setPageContextForTasks(c)

	// To find the Task the parameter task_id is used.
	if err := tx.Find(task, c.Param("task_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("task", task)

		return c.Render(http.StatusOK, r.HTML("tasks/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(task))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(task))
	}).Respond(c)
}

// New renders the form for creating a new Task.
// This function is mapped to the path GET /tasks/new
func (v TasksResource) New(c buffalo.Context) error {
	c.Set("task", &models.Task{})
	setPageContextForTasks(c)

	return c.Render(http.StatusOK, r.HTML("tasks/new.plush.html"))
}

// Create adds a Task to the DB. This function is mapped to the
// path POST /tasks
func (v TasksResource) Create(c buffalo.Context) error {
	// Allocate an empty Task
	task := &models.Task{}

	// Bind task to the html form elements
	if err := c.Bind(task); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(task)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("task", task)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("tasks/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "task.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/tasks/%v", task.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(task))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(task))
	}).Respond(c)
}

// Edit renders a edit form for a Task. This function is
// mapped to the path GET /tasks/{task_id}/edit
func (v TasksResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Task
	task := &models.Task{}
	setPageContextForTasks(c)

	if err := tx.Find(task, c.Param("task_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("task", task)
	return c.Render(http.StatusOK, r.HTML("tasks/edit.plush.html"))
}

// Update changes a Task in the DB. This function is mapped to
// the path PUT /tasks/{task_id}
func (v TasksResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Task
	task := &models.Task{}

	if err := tx.Find(task, c.Param("task_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Task to the html form elements
	if err := c.Bind(task); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(task)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("task", task)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("tasks/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "task.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/tasks/%v", task.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(task))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(task))
	}).Respond(c)
}

// Destroy deletes a Task from the DB. This function is mapped
// to the path DELETE /tasks/{task_id}
func (v TasksResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Task
	task := &models.Task{}

	// To find the Task the parameter task_id is used.
	if err := tx.Find(task, c.Param("task_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(task); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "task.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/tasks")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(task))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(task))
	}).Respond(c)
}
