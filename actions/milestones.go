package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"go_goals/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Milestone)
// DB Table: Plural (milestones)
// Resource: Plural (Milestones)
// Path: Plural (/milestones)
// View Template Folder: Plural (/templates/milestones/)

// MilestonesResource is the resource for the Milestone model
type MilestonesResource struct {
	buffalo.Resource
}

func setPageContextForMilestones(c buffalo.Context) {
	c.Set("priorityOptions", PRIORITY_OPTIONS)
	c.Set("priorityIdsToNameMapping", PRIORITY_IDS_TO_NAME)
	currentUser := c.Value("current_user").(*models.User)
	goalOptions := make(map[string]string)
	goalIdsToNameMap := make(map[string]string)
	goals := []models.Goal{}
	err := models.DB.Where("user_id = ?", currentUser.ID).All(&goals)
	if err == nil {
		for _, goal := range goals {
			goalOptions[goal.Title] = goal.ID.String()
			goalIdsToNameMap[goal.ID.String()] = goal.Title
		}
	} else {
		c.Logger().Errorf("Error getting goals: %v", err)
	}
	c.Set("goalOptions", goalOptions)
	c.Set("goalIdsToNameMap", goalIdsToNameMap)
}

// List gets all Milestones. This function is mapped to the path
// GET /milestones
func (v MilestonesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	setPageContextForMilestones(c)

	milestones := &models.Milestones{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Milestones from the DB
	if err := q.All(milestones); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("milestones", milestones)
		return c.Render(http.StatusOK, r.HTML("milestones/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(milestones))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(milestones))
	}).Respond(c)
}

// Show gets the data for one Milestone. This function is mapped to
// the path GET /milestones/{milestone_id}
func (v MilestonesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	setPageContextForMilestones(c)

	// Allocate an empty Milestone
	milestone := &models.Milestone{}

	// To find the Milestone the parameter milestone_id is used.
	if err := tx.Find(milestone, c.Param("milestone_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("milestone", milestone)

		return c.Render(http.StatusOK, r.HTML("milestones/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(milestone))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(milestone))
	}).Respond(c)
}

// New renders the form for creating a new Milestone.
// This function is mapped to the path GET /milestones/new
func (v MilestonesResource) New(c buffalo.Context) error {
	c.Set("milestone", &models.Milestone{})
	setPageContextForMilestones(c)
	return c.Render(http.StatusOK, r.HTML("milestones/new.plush.html"))
}

// Create adds a Milestone to the DB. This function is mapped to the
// path POST /milestones
func (v MilestonesResource) Create(c buffalo.Context) error {
	// Allocate an empty Milestone
	milestone := &models.Milestone{}

	// Bind milestone to the html form elements
	if err := c.Bind(milestone); err != nil {
		return err
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(milestone)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("milestone", milestone)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("milestones/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "milestone.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/milestones/%v", milestone.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(milestone))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(milestone))
	}).Respond(c)
}

// Edit renders a edit form for a Milestone. This function is
// mapped to the path GET /milestones/{milestone_id}/edit
func (v MilestonesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	setPageContextForMilestones(c)
	// Allocate an empty Milestone
	milestone := &models.Milestone{}

	if err := tx.Find(milestone, c.Param("milestone_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("milestone", milestone)
	return c.Render(http.StatusOK, r.HTML("milestones/edit.plush.html"))
}

// Update changes a Milestone in the DB. This function is mapped to
// the path PUT /milestones/{milestone_id}
func (v MilestonesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Milestone
	milestone := &models.Milestone{}

	if err := tx.Find(milestone, c.Param("milestone_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Milestone to the html form elements
	if err := c.Bind(milestone); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(milestone)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("milestone", milestone)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("milestones/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "milestone.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/milestones/%v", milestone.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(milestone))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(milestone))
	}).Respond(c)
}

// Destroy deletes a Milestone from the DB. This function is mapped
// to the path DELETE /milestones/{milestone_id}
func (v MilestonesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Milestone
	milestone := &models.Milestone{}

	// To find the Milestone the parameter milestone_id is used.
	if err := tx.Find(milestone, c.Param("milestone_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(milestone); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "milestone.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/milestones")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(milestone))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(milestone))
	}).Respond(c)
}
